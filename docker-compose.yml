version: '3.4'

services:
  web:
    image: virtudoc/web
    build:
      context: .
      dockerfile: Dockerfile
    depends_on:
      - db
      - minio
      - email
    ports:
      - '8080:8080'
    volumes:
    - ./:/app
    - ./.m2-cache:/root/.m2
    - logdata:/logs
    environment:
      JDBC_DATABASE_URL: jdbc:postgresql://db:5432/virtudoc
      JDBC_DATABASE_USERNAME: root
      JDBC_DATABASE_PASSWORD: virtudoc
      SMTP_SERVER: email
      SMTP_USERNAME: testuser@dev.local
      SMTP_PASSWORD: testpassword
      SMTP_PORT: 25
      AWS_ACCESS_KEY_ID: virtudoc
      AWS_SECRET_ACCESS_KEY: virtudoc
      AWS_BUCKET: virtudoc
      AWS_ENDPOINT: http://minio:9000
    healthcheck:
      test: ["CMD", "curl", "--fail", "--silent", "--output", "/dev/null", "--head", "--write-out", "%{http_code}", "http://localhost:8080"]
      interval: 10s
      timeout: 10s
      retries: 3
      start_period: 60s
  db:
    image: postgres:13.5-alpine
    ports:
      - "55432:5432"
    volumes:
      - dbdata:/var/lib/mysql
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "pg_isready", "-q", "-d", "postgres", "-U", "root" ]
      timeout: 30s
      interval: 10s
      retries: 10
    environment:
      POSTGRES_USER: root
      POSTGRES_PASSWORD: virtudoc
      POSTGRES_DB: virtudoc
  proxy:
    image: virtudoc/proxy
    build:
      context: ./proxy
      dockerfile: proxy.Dockerfile
    depends_on:
      - web
    ports:
      - "443:443"
      - "80:80"
    volumes:
      - ./proxy/cert:/cert
    restart: always
  email:
    image: rnwood/smtp4dev:3.1.3-ci20211206101
    ports:
      - "3000:80"
  minio:
    image: quay.io/minio/minio:RELEASE.2022-01-28T02-28-16Z
    volumes:
      - s3data:/data
    ports:
      - "9001:9001"
      - "9000:9000"
    environment:
      MINIO_ROOT_USER: virtudoc
      MINIO_ROOT_PASSWORD: virtudoc
      MINIO_ACCESS_KEY: virtudoc
      MINIO_SECRET_KEY: virtudoc
    command: server --console-address ":9001" --address 0.0.0.0:9000 /data
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 30s
      timeout: 20s
      retries: 3
  elasticsearch:
    container_name: elasticsearch
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.0
    environment:
      - ES_JAVA_OPTS=-Xms2g -Xmx2g
      - xpack.license.self_generated.type=basic
      - discovery.type=single-node
      - ELASTIC_PASSWORD=elastic
      - xpack.security.enabled=false
      - xpack.security.authc.api_key.enabled=false
      - xpack.monitoring.collection.enabled=false
    ports:
      - "9200:9200"
      - "9300:9300"
    restart: always
    profiles:
      - debug
  kibana:
    container_name: kibana
    image: docker.elastic.co/kibana/kibana:7.17.0
    environment:
      - ELASTICSEARCH_USERNAME=elastic
      - ELASTICSEARCH_PASSWORD=elastic
      - xpack.security.enabled=false
      - xpack.ingestManager.fleet.tlsCheckDisabled=true
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    profiles:
      - debug
    restart: always
  logstash:
    container_name: logstash
    image: docker.elastic.co/logstash/logstash:7.17.0
    volumes:
      - ./dev/elk/logstash/pipeline/:/usr/share/logstash/pipeline/
    environment:
      - xpack.security.enabled=false
      - xpack.monitoring.enabled=false
    depends_on:
      - elasticsearch
    profiles:
      - debug
    restart: always
  filebeat:
    container_name: filebeat
    image: docker.elastic.co/beats/filebeat:7.17.0
    restart: always
    command: filebeat -e --strict.perms=false
    environment:
      LS_JAVA_OPTS: -Xms256m -Xmx256m
    depends_on:
      - logstash
      - kibana
    volumes:
      - logdata:/logs
      - ./dev/elk/filebeat.yml:/usr/share/filebeat/filebeat.yml
    profiles:
      - debug
volumes:
  dbdata:
  logdata:
  s3data:
